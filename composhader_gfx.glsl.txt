#version 430
uniform float iGlobalTime; 
// nice times 2223

mat3 rotate_x(float a){float sa = sin(a); float ca = cos(a); return mat3(vec3(1.,.0,.0),    vec3(.0,ca,sa),   vec3(.0,-sa,ca));}
mat3 rotate_y(float a){float sa = sin(a); float ca = cos(a); return mat3(vec3(ca,.0,sa),    vec3(.0,1.,.0),   vec3(-sa,.0,ca));}
mat3 rotate_z(float a){float sa = sin(a); float ca = cos(a); return mat3(vec3(ca,sa,.0),    vec3(-sa,ca,.0),  vec3(.0,.0,1.));}

vec3 mandelboxPosition;

//#define BPM 119.
//#define BPS (60. / BPM)
#define BPS 0.50420168

//#define DEL -0.05
//#define TT iGlobalTime - DEL

float tt()
{
    return iGlobalTime + 0.05;
}

float revsaw(float beats)
{
    float wavel = BPS * beats;
    return smoothstep(0., 1., 1. - mod(tt(), wavel) / wavel);
}

float square(float beats)
{
    float wavel = BPS * beats;
    return (mod(tt(), wavel) / wavel) < .5 ? 0. : 1.;
}

float beatstep(float beats)
{
    float wavel = BPS * beats;
    return tt() < wavel ? 0. : 1.;
}

float sdTorus(in vec3 p, in vec2 t)
{
    vec2 q = vec2(length(p.xz) - t.x, p.y);
    return length(q) - t.y;
}

float sdSphere(in vec3 p, in float s)
{
    return length(p) - s;
}

float sdBox( vec3 p, vec3 b )
{
  vec3 q = abs(p) - b;
  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}

vec3 repeat(in vec3 pos, in vec3 s)
{
    return pos - s*round(pos / s);
}

float opUnion(in float d1, in float d2)
{
    return min(d1, d2);
}

float opSubtraction(in float d1, in float d2)
{
    return max(d1,-d2);
}

//http://blog.hvidtfeldts.net/index.php/2011/11/distance-estimated-3d-fractals-vi-the-mandelbox/
void sphereFold(inout vec3 z, inout float dz) {
    //float minRadius2 = 0.;
    float fixedRadius2 = 1.7;


    float r2 = dot(z,z);
    if (r2<fixedRadius2) { 
      // this is the actual sphere inversion
      float temp =(fixedRadius2/r2);
      z *= temp;
      dz*= temp;
    }
}

void boxFold(inout vec3 z, inout float dz) {
    float boxSize = 1.;
    z = clamp(z, -boxSize, boxSize) * 2. - z;
}

//http://blog.hvidtfeldts.net/index.php/2011/11/distance-estimated-3d-fractals-vi-the-mandelbox/
float mandelbox_de(vec3 z)
  {
    if (beatstep(138.) > .9 && beatstep(160.) < .9)
        return 10000.;
  
    mandelboxPosition = z;

    //Change for different look
    float Scale = -0.85 - sin(iGlobalTime * .002) * .45;

    vec3 offset = z;
    float dr = 20.;
    for (int n = 0; n < 13; n++) {
      boxFold(z,dr);       // Reflect
      sphereFold(z,dr);    // Sphere Inversion

      z=Scale*z + offset;  // Scale & Translate
      dr = dr*abs(Scale)+1.;
    }
    float r = length(z);
    return r/abs(dr);
}

float sailing_boxes(in vec3 pos)
{
    if ((beatstep(124.) > .9 && beatstep(160.) < .9) ||
        (beatstep(232.) > .9 && beatstep(240.) < .9) ||
        (beatstep(256.) > .9 && beatstep(272.) < .9) ||
        (beatstep(336.) > .9 && beatstep(376.) < .9))
    {
        vec3 bPos = vec3(6., 0., 0.);
        float rOfs = 6.28 / 10. + sin(iGlobalTime * .6) * .2;
        float d = 10000.;
        
        for (float i=0.; i<3.; i+=1.)
        {
            for (float j=0.; j<10.; j+=1.)
            {
                vec3 layerSpace = pos - vec3(0., -2. + i * 2., 0.);
                vec3 ringSpace = layerSpace - rotate_y(j * rOfs + iGlobalTime * .5) * bPos;
                vec3 boxSpace = rotate_y(-rOfs) * ringSpace;
                d = min(d, sdBox(boxSpace, vec3(.4)));
            }
        }
        return d;
    }
    else
    {
        return 10000.;
    }
}

float scene(in vec3 pos )
{
    vec3 s = vec3(6.0,5.0,6.0);
    vec3 s2 = vec3(6.0,2.5,6.0);
  
    float d1 = mandelbox_de((pos + vec3(30., cos(iGlobalTime*0.0025) * 30., 1.)) * (sin(iGlobalTime* 0.025) + 1.5) * 0.025);
    
    float size1 = 6.0 + beatstep(140.) * 2.;
    float size2 = 2.5 + beatstep(128.) * 3. - beatstep(140.) * 2.;
    float d2 = sdTorus(pos, vec2(size1, size2));
    d1 = opSubtraction(d1, d2);
    
    
    float dd1 = sdSphere(repeat(pos + vec3(sin(iGlobalTime) * 1.6, 1.5, cos(iGlobalTime) * 1.6), s), 0.7);
    d1 = min(d1, dd1);
   
   
    vec3 rep2 = vec3(10.0,10.0,10.0);
    vec3 bsize = vec3(6.,6.,2.) * (1.5 - square(32.) * .5);
    vec3 boffset = vec3(0., 0., 5. * sin(iGlobalTime * .1));
    
    float d3 = sdBox(repeat(boffset + pos * rotate_x(iGlobalTime * 0.1), rep2), bsize);
    float d = opSubtraction(d1, d3);
    
    d = min(d, sailing_boxes(pos));
   
    return d;
}

// https://iquilezles.org/articles/normalsSDF
vec3 calcNormal( in vec3 pos )
{
    vec2 e = vec2(1.,-1.)*.5773;
    const float eps = .0005;
    return normalize( e.xyy*scene( pos + e.xyy*eps ) + 
					  e.yyx*scene( pos + e.yyx*eps ) + 
					  e.yxy*scene( pos + e.yxy*eps ) + 
					  e.xxx*scene( pos + e.xxx*eps ) );
}
    
float hash(float p)
{
	vec3 p3  = fract(vec3(p) * .1031);
    p3 += dot(p3, p3.yzx + 19.19);
    return fract((p3.x + p3.y) * p3.z);
}    
    
float ambientOcclusion( in vec3 p, in vec3 n, in float maxDist, in float falloff )
{
    float ao = 0.;
    for( int i=0; i<9; i++ )
    {
        float l = hash(float(i))*maxDist;
        vec3 rd = n*l;

        ao += (l - max(scene( p + rd ),0.)) / maxDist * falloff;
    }

    return clamp( 1.-ao/9., .05, 1.);
}

vec3 stripes(vec3 pos)
{
    float stripe = sin(pos.x * 7.) * .4 + .6;
    return vec3(1., stripe, stripe * .75);
}    

int numRibbons()
{
    return 4 + int(beatstep(128.)) * 3;
}

int numRibbonStacks()
{
    return 1 + int(beatstep(124.)) * 4 - int(beatstep(160.)) * 3;
}

float ribbonSpacing()
{
    return 6. - beatstep(124.) * 2.5;
}

float ribbonLength()
{
    return 4. + beatstep(120.) * 6.;
}

vec3 ribbonColor( float n )
{
    return vec3(mod(n, 7.) / 14., mod(n, 5.) / 5., .5 + mod(n, 3.) / 6.);
}

vec2 ribbonscene( vec3 p )
{
   float size = revsaw(1.) * .05 + .05 + beatstep(120.) * .05;
   float d = 10000.;
   float ld = d;
   float ribbonStart = float(-numRibbons()) * ribbonSpacing() / 2. + 6.;
   float n = 0.;
   for (int i=0; i<numRibbons(); ++i)
   {
       float fi = float(i);
       for (int j=0; j<numRibbonStacks(); ++j)
       {
           float fj = float(j+1);
           d = min(d, sdBox(p + vec3(fj * ribbonSpacing() + 3. * sin(iGlobalTime * 0.2 * fj) + cos(p.z * .5), ribbonStart + ribbonSpacing() * fi + sin(p.z * .5), ribbonStart + fi * ribbonSpacing() * 2. * sin(iGlobalTime*.25*fj)), vec3(size, size, ribbonLength())));
           if (d < ld)
           {
               n = float(numRibbonStacks()) * fj + fi;
               ld = d;
           }           
       }
   }
   return vec2(d, n);
}

vec3 ribbons( in vec3 rd, in vec3 ro, in float boxDepth )
{
    // raymarch
    const float tmax = 15.;
    float t = 0.0;
    vec3 pos;
    float n = 0.;
    for( int i=0; i<64; i++ )
    {
        pos = ro + t*rd;
        vec2 ribbonResult = ribbonscene(pos);
        float h = ribbonResult.x;
        if( h<0.0001) {
            n = ribbonResult.y;
            break;
        }
        else if ( t > tmax)
        {
            break;
        }
        t += h;
    }     
    
    // color
    if(t<tmax && t < boxDepth)
    {
        return ribbonColor(n);
    }
    return vec3(0.);
}    
    
void main( void )
{
    // fragment position  
    vec2 iResolution = vec2(1280,720);
    vec2 p = (-iResolution.xy + 2.0*gl_FragCoord.xy)/iResolution.y;

    // camera movement	
	float an = 0.05*(iGlobalTime) + sin(iGlobalTime * 0.1) * p.y * sin(iGlobalTime * 0.05) * 2.;
    an *= square(32.) * 2. - 1.;
	vec3 ro = vec3( 8.*cos(an), 0.6, 8.*sin(an));
    vec3 ta = vec3( 0.0, sin(iGlobalTime * 0.5) * 1.0, 0.0 );
    
    //ro = vec3(-1.0,0.0,-1.9);
    
    // camera matrix
    vec3 up = vec3(0.0,0.6,0.5);
    vec3 ww = normalize( ta - ro );
    vec3 uu = normalize( cross(ww, up) );
    vec3 vv = normalize( cross(uu, ww) );
      
	// create view ray
    vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );

    // uv coordinates
    //vec2 uv = vec2(0.0, 0.0);

    // raymarch
    const float tmax = 35.0;
    float t = 0.0;
    float ribsDist = 100000.0;
    vec3 pos;
    float n = 0.;
    for( int i=0; i<128; i++ )
    {
        pos = ro + t*rd;
        float h = scene(pos);
        if( h<0.00015) {
            vec2 ribResult = ribbonscene(pos);
            ribsDist = ribResult.x;
            n = ribResult.y;
            break;
        }
        else if ( t > tmax)
        {
            break;
        }
        t += h;
    }     
    
    // shading
    vec3 col = vec3(0.0);
    if( t<tmax )
    {
        vec3 nor = calcNormal(pos);
        
        float dif = clamp( dot(nor,vec3(0.7,1.2,0.4)), 0.0, 1.2 );
        dif *= dif;
        dif *= dif;
        dif *= revsaw(16.);
        
        float amb = 0.5 + 0.5*dot(nor,vec3(0.0,0.8,-0.6));
        amb *= revsaw(16.);
        
        col = ( vec3(0.2,0.3,0.5)*amb + stripes(mandelboxPosition)*vec3(0.9,0.8,0.6)*dif );    
             
        col *= ambientOcclusion(pos, nor, 2.5, 2.5);
        
        if ( ribsDist < 2. )
        {
            float f = (2. - ribsDist) / 2.;
            col += f * f * f * ribbonColor(n) * (revsaw(1.) * .5 + .5);
        }
    
        col /= max(1.0, pos.z * .5);
    }

    // gamma        
    col = sqrt( col );

    //grading
    col = col*0.5 + 0.5*col*col*(3.0-2.0*col);

    vec3 ribs = ribbons( rd, ro, t );

	gl_FragColor = vec4( col, t ) + vec4(ribs, 0.);
}